{"version":3,"sources":["components/Controls/Controls.module.css","components/Balance/Balance.module.css","components/TransactionHistory/TransactionHistory.module.css","components/Dashboard/Dashboard.module.css","components/Controls/Controls.jsx","components/Balance/Balance.jsx","components/TransactionHistory/TransactionHistory.jsx","components/Dashboard/Dashboard.jsx","components/App/App.jsx","index.js"],"names":["module","exports","controls","balance","history","dashboard","toast","configure","Controls","state","input","handleInput","_ref","value","target","_this","setState","handleClick","event","preventDefault","name","_this$props","props","handleTransaction","enteredNumber","Number","actualDate","Date","toLocaleString","newTransaction","id","shortid","generate","type","this","react_default","a","createElement","className","styles","onChange","placeholder","onClick","Component","Balance","transactions","filter","reduce","acc","val","role","aria-label","TransactionHistory","map","key","Dashboard","setLocalStorage","localStorage","setItem","JSON","stringify","prevState","concat","Object","toConsumableArray","transactionsStorage","parse","getItem","balanceStorage","_this$state","Controls_Controls","components_Balance_Balance","components_TransactionHistory_TransactionHistory","React","App","Dashboard_Dashboard","ReactDOM","render","components_App_App","document","getElementById"],"mappings":"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","file":"static/js/main.00628694.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__2HfMc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__OxJH7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"history\":\"TransactionHistory_history__35-r5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"Dashboard_dashboard__3XIvJ\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport styles from './Controls.module.css';\n\ntoast.configure();\n\nexport default class Controls extends Component {\n  static propTypes = {\n    handleTransaction: PropTypes.func.isRequired,\n    balance: PropTypes.number.isRequired,\n  };\n\n  state = {\n    input: '',\n  };\n\n  handleInput = ({ target }) => {\n    const { value } = target;\n    this.setState({\n      input: value,\n    });\n  };\n\n  handleClick = event => {\n    event.preventDefault();\n\n    const { name } = event.target;\n    const { input } = this.state;\n    const { handleTransaction, balance } = this.props;\n\n    const enteredNumber = Number(input);\n    const actualDate = new Date().toLocaleString();\n\n    const newTransaction = {\n      id: shortid.generate(),\n      type: name,\n      enteredNumber,\n      actualDate,\n    };\n\n    if (\n      balance < newTransaction.enteredNumber &&\n      newTransaction.type === 'withdraw'\n    ) {\n      toast('На счету недостаточно средств для проведения операции!');\n      this.setState({ input: '' });\n      return;\n    }\n\n    if (input === '' || Number(input) < 0 || input === '0') {\n      toast('Введите сумму для проведения операции!');\n      this.setState({ input: '' });\n      return;\n    }\n\n    handleTransaction(newTransaction);\n    this.setState({ input: '' });\n  };\n\n  render() {\n    const { input } = this.state;\n    return (\n      <section className={styles.controls}>\n        <input\n          type=\"number\"\n          value={input}\n          onChange={this.handleInput}\n          placeholder=\"Enter your number\"\n        />\n        <button type=\"button\" name=\"deposit\" onClick={this.handleClick}>\n          Deposit\n        </button>\n        <button type=\"button\" name=\"withdraw\" onClick={this.handleClick}>\n          Withdraw\n        </button>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Balance.module.css';\n\nconst Balance = ({ balance, transactions }) => {\n  const handleTransaction = type => {\n    const renderBalance = transactions\n      .filter(newTransaction => newTransaction.type === type)\n      .reduce((acc, val) => acc + val.enteredNumber, 0);\n    return renderBalance;\n  };\n\n  return (\n    <section className={styles.balance}>\n      <span role=\"img\" aria-label=\"deposit\">\n        ⬆️{handleTransaction('deposit')}$\n      </span>\n      <span role=\"img\" aria-label=\"withdraw\">\n        ⬇️{handleTransaction('withdraw')}\n      </span>\n      <span>Balance: {balance}$</span>\n    </section>\n  );\n};\nBalance.propTypes = {\n  balance: PropTypes.number.isRequired,\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      enteredNumber: PropTypes.number.isRequired,\n      actualDate: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default Balance;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './TransactionHistory.module.css';\n\nconst TransactionHistory = ({ transactions }) => {\n  return (\n    <table className={styles.history}>\n      <thead>\n        <tr>\n          <th>Transaction</th>\n          <th>Amount</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        {transactions.map(newTransaction => (\n          <tr key={newTransaction.id}>\n            <td>{newTransaction.type}</td>\n            <td>{newTransaction.enteredNumber}$</td>\n            <td>{newTransaction.actualDate}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nTransactionHistory.propTypes = {\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.string.isRequired,\n      enteredNumber: PropTypes.number.isRequired,\n      actualDate: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n};\n\nexport default TransactionHistory;\n","import React from 'react';\nimport Controls from '../Controls/Controls';\nimport Balance from '../Balance/Balance';\nimport TransactionHistory from '../TransactionHistory/TransactionHistory';\nimport styles from './Dashboard.module.css';\n\nexport default class Dashboard extends React.Component {\n  state = {\n    transactions: [],\n    balance: 0,\n  };\n\n  setLocalStorage = () => {\n    localStorage.setItem(\n      'transactions',\n      JSON.stringify(this.state.transactions),\n    );\n    localStorage.setItem('balance', JSON.stringify(this.state.balance));\n    return;\n  };\n\n  componentDidMount() {\n    const transactionsStorage = JSON.parse(\n      localStorage.getItem('transactions'),\n    );\n    const balanceStorage = JSON.parse(localStorage.getItem('balance'));\n    if (transactionsStorage) {\n      this.setState({\n        transactions: transactionsStorage,\n        balance: balanceStorage,\n      });\n    }\n  }\n\n  handleTransaction = newTransaction => {\n    this.setState(\n      prevState => ({\n        transactions: [...prevState.transactions, newTransaction],\n        balance:\n          newTransaction.type === 'deposit'\n            ? prevState.balance + newTransaction.enteredNumber\n            : prevState.balance - newTransaction.enteredNumber,\n      }),\n      this.setLocalStorage,\n    );\n  };\n\n  render() {\n    const { balance, transactions } = this.state;\n    return (\n      <div className={styles.dashboard}>\n        <Controls\n          balance={balance}\n          handleTransaction={this.handleTransaction}\n        />\n        <Balance balance={balance} transactions={transactions} />\n        <TransactionHistory transactions={transactions} />\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport Dashboard from '../Dashboard/Dashboard';\n\nconst App = () => <Dashboard />;\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport './style.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}